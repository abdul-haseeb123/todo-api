openapi: 3.0.0
info:
  title: Todo API
  description: A RESTful API for managing tasks with AWS infrastructure
  version: 1.0.0
  contact:
    name: Abdul Haseeb
    email: syedabdulhaseeb611@gmail.com
    url: https://github.com/abdul-haseeb123

servers:
  - url: http://{host}:8000/api
    description: API Server
    variables:
      host:
        default: localhost
        description: API host name

paths:
  /tasks:
    get:
      summary: Get all tasks
      description: Retrieve a list of all tasks
      responses:
        "200":
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TasksResponse"
        "500":
          $ref: "#/components/responses/ServerError"

    post:
      summary: Create a new task
      description: Create a new task with title and description
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskInput"
      responses:
        "201":
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskResponse"
        "400":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/ServerError"

  /tasks/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Task ID

    get:
      summary: Get task by ID
      description: Retrieve a specific task by its ID
      responses:
        "200":
          description: Task retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskResponse"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

    put:
      summary: Update task
      description: Update a task's title and/or description
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskUpdateInput"
      responses:
        "200":
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskResponse"
        "400":
          $ref: "#/components/responses/ValidationError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

    delete:
      summary: Delete task
      description: Delete a task by its ID
      responses:
        "200":
          description: Task deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskResponse"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  /tasks/{id}/complete:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Task ID

    patch:
      summary: Mark task as complete
      description: Update task status to completed
      responses:
        "200":
          description: Task marked as completed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskResponse"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  /tasks/{id}/uncomplete:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Task ID

    patch:
      summary: Mark task as incomplete
      description: Update task status to incomplete
      responses:
        "200":
          description: Task marked as incomplete
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskResponse"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

components:
  schemas:
    Task:
      type: object
      properties:
        id:
          type: integer
          description: Task identifier
        title:
          type: string
          description: Task title
        description:
          type: string
          description: Task description
        completed:
          type: boolean
          description: Task completion status
      required:
        - id
        - title
        - description
        - completed

    TaskInput:
      type: object
      properties:
        title:
          type: string
          description: Task title
        description:
          type: string
          description: Task description
      required:
        - title
        - description

    TaskUpdateInput:
      type: object
      properties:
        title:
          type: string
          description: Task title
        description:
          type: string
          description: Task description
      minProperties: 1

    Metadata:
      type: object
      properties:
        availabilityZone:
          type: string
          description: AWS availability zone
        instanceId:
          type: string
          description: EC2 instance ID

    ApiResponse:
      type: object
      properties:
        statusCode:
          type: integer
          description: HTTP status code
        data:
          type: object
          description: Response data
        message:
          type: string
          description: Response message
        success:
          type: boolean
          description: Operation success status

    TaskResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: object
              properties:
                task:
                  $ref: "#/components/schemas/Task"
                metadata:
                  $ref: "#/components/schemas/Metadata"

    TasksResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: object
              properties:
                tasks:
                  type: array
                  items:
                    $ref: "#/components/schemas/Task"
                metadata:
                  $ref: "#/components/schemas/Metadata"

    Error:
      type: object
      properties:
        statusCode:
          type: integer
        message:
          type: string
        success:
          type: boolean
        errors:
          type: array
          items:
            type: string

  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
